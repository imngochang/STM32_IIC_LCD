
I2C-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b7c  08002b7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b7c  08002b7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b7c  08002b7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002b90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002b90  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cb8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f6  00000000  00000000  00028cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea02  00000000  00000000  0002b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a158  00000000  00000000  00049cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b82f6  00000000  00000000  00053e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c90  00000000  00000000  0010c16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b24 	.word	0x08002b24

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002b24 	.word	0x08002b24

080001d4 <LCD_init>:

/*BEGIN Define*/

/*BEGIN function define*/
LCD_HandleTypeDef LCD_init(I2C_HandleTypeDef* i2c_handle, uint8_t device_address)
{
 80001d4:	b590      	push	{r4, r7, lr}
 80001d6:	b089      	sub	sp, #36	; 0x24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	71fb      	strb	r3, [r7, #7]
	LCD_HandleTypeDef LCD;
	LCD.i2c_handle = i2c_handle;
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	617b      	str	r3, [r7, #20]
	LCD.device_address = device_address;
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	763b      	strb	r3, [r7, #24]
	HAL_Delay(50);
 80001ea:	2032      	movs	r0, #50	; 0x32
 80001ec:	f000 fb30 	bl	8000850 <HAL_Delay>
	LCD_sendCommand (&LCD, 0x33); /* set 4-bits interface */
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2133      	movs	r1, #51	; 0x33
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f848 	bl	800028c <LCD_sendCommand>
	LCD_sendCommand (&LCD, 0x32);
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2132      	movs	r1, #50	; 0x32
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f842 	bl	800028c <LCD_sendCommand>
	HAL_Delay(5);
 8000208:	2005      	movs	r0, #5
 800020a:	f000 fb21 	bl	8000850 <HAL_Delay>
	LCD_sendCommand (&LCD, 0x28); /* start to set LCD function */ // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2128      	movs	r1, #40	; 0x28
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f839 	bl	800028c <LCD_sendCommand>
	HAL_Delay(5);
 800021a:	2005      	movs	r0, #5
 800021c:	f000 fb18 	bl	8000850 <HAL_Delay>
	LCD_sendCommand (&LCD, 0x01); /* clear display */
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f830 	bl	800028c <LCD_sendCommand>
	HAL_Delay(5);
 800022c:	2005      	movs	r0, #5
 800022e:	f000 fb0f 	bl	8000850 <HAL_Delay>
	LCD_sendCommand (&LCD, 0x06); /* set entry mode */
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2106      	movs	r1, #6
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f827 	bl	800028c <LCD_sendCommand>
	HAL_Delay(5);
 800023e:	2005      	movs	r0, #5
 8000240:	f000 fb06 	bl	8000850 <HAL_Delay>
	LCD_sendCommand (&LCD, 0x0c); /* set display to on */
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	210c      	movs	r1, #12
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f81e 	bl	800028c <LCD_sendCommand>
	HAL_Delay(5);
 8000250:	2005      	movs	r0, #5
 8000252:	f000 fafd 	bl	8000850 <HAL_Delay>
	LCD_sendCommand (&LCD, 0x02); /* move cursor to home and set data address to 0 */
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2102      	movs	r1, #2
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f815 	bl	800028c <LCD_sendCommand>
	HAL_Delay(5);
 8000262:	2005      	movs	r0, #5
 8000264:	f000 faf4 	bl	8000850 <HAL_Delay>
	LCD_sendCommand (&LCD, 0x80);
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f80c 	bl	800028c <LCD_sendCommand>
	return LCD;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	461c      	mov	r4, r3
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	3724      	adds	r7, #36	; 0x24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd90      	pop	{r4, r7, pc}

0800028c <LCD_sendCommand>:

void LCD_sendCommand(LCD_HandleTypeDef* lcd_handle, char cmd)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af02      	add	r7, sp, #8
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
	data_u = (cmd&0xf0);
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	f023 030f 	bic.w	r3, r3, #15
 80002a2:	73bb      	strb	r3, [r7, #14]
	data_l = ((cmd<<4)&0xf0);
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	011b      	lsls	r3, r3, #4
 80002a8:	73fb      	strb	r3, [r7, #15]
	lcd_handle->data[0] = data_u|0x0C;  //en=1, rs=0
 80002aa:	7bbb      	ldrb	r3, [r7, #14]
 80002ac:	f043 030c 	orr.w	r3, r3, #12
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	715a      	strb	r2, [r3, #5]
	lcd_handle->data[1] = data_u|0x08;  //en=0, rs=0
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	719a      	strb	r2, [r3, #6]
	lcd_handle->data[2] = data_l|0x0C;  //en=1, rs=0
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
 80002c4:	f043 030c 	orr.w	r3, r3, #12
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	71da      	strb	r2, [r3, #7]
	lcd_handle->data[3] = data_l|0x08;  //en=0, rs=0
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	f043 0308 	orr.w	r3, r3, #8
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	721a      	strb	r2, [r3, #8]
	HAL_I2C_Master_Transmit(lcd_handle->i2c_handle, lcd_handle->device_address, (uint8_t *) lcd_handle->data, 4, 100);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	b299      	uxth	r1, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	1d5a      	adds	r2, r3, #5
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2304      	movs	r3, #4
 80002ee:	f000 fdd3 	bl	8000e98 <HAL_I2C_Master_Transmit>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <LCD_sendData>:

void LCD_sendData(LCD_HandleTypeDef* lcd_handle, char data)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b086      	sub	sp, #24
 80002fe:	af02      	add	r7, sp, #8
 8000300:	6078      	str	r0, [r7, #4]
 8000302:	460b      	mov	r3, r1
 8000304:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
	data_u = (data&0xf0);
 800030a:	78fb      	ldrb	r3, [r7, #3]
 800030c:	f023 030f 	bic.w	r3, r3, #15
 8000310:	73bb      	strb	r3, [r7, #14]
	data_l = ((data<<4)&0xf0);
 8000312:	78fb      	ldrb	r3, [r7, #3]
 8000314:	011b      	lsls	r3, r3, #4
 8000316:	73fb      	strb	r3, [r7, #15]
	lcd_handle->data[0] = data_u|0x0D;  //en=1, rs=0
 8000318:	7bbb      	ldrb	r3, [r7, #14]
 800031a:	f043 030d 	orr.w	r3, r3, #13
 800031e:	b2da      	uxtb	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	715a      	strb	r2, [r3, #5]
	lcd_handle->data[1] = data_u|0x09;  //en=0, rs=0
 8000324:	7bbb      	ldrb	r3, [r7, #14]
 8000326:	f043 0309 	orr.w	r3, r3, #9
 800032a:	b2da      	uxtb	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	719a      	strb	r2, [r3, #6]
	lcd_handle->data[2] = data_l|0x0D;  //en=1, rs=0
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	f043 030d 	orr.w	r3, r3, #13
 8000336:	b2da      	uxtb	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	71da      	strb	r2, [r3, #7]
	lcd_handle->data[3] = data_l|0x09;  //en=0, rs=0
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	f043 0309 	orr.w	r3, r3, #9
 8000342:	b2da      	uxtb	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	721a      	strb	r2, [r3, #8]
	HAL_I2C_Master_Transmit(lcd_handle->i2c_handle, lcd_handle->device_address, (uint8_t *) lcd_handle->data, 4, 100);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6818      	ldr	r0, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	b299      	uxth	r1, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	1d5a      	adds	r2, r3, #5
 8000356:	2364      	movs	r3, #100	; 0x64
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2304      	movs	r3, #4
 800035c:	f000 fd9c 	bl	8000e98 <HAL_I2C_Master_Transmit>
}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <LCD_sendString>:

void LCD_sendString(LCD_HandleTypeDef* lcd_handle, char* data)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
	while(*data) LCD_sendData(lcd_handle, *data++);
 8000372:	e007      	b.n	8000384 <LCD_sendString+0x1c>
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	603a      	str	r2, [r7, #0]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ffbb 	bl	80002fa <LCD_sendData>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f3      	bne.n	8000374 <LCD_sendString+0xc>
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <LCD_clearDisplay>:

void LCD_clearDisplay(LCD_HandleTypeDef* lcd_handle)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
	LCD_sendCommand(lcd_handle, 0x01); //clear display
 800039e:	2101      	movs	r1, #1
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff ff73 	bl	800028c <LCD_sendCommand>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <LCD_setCursor>:

void LCD_setCursor(LCD_HandleTypeDef* lcd_handle, uint8_t row, uint8_t col)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	460b      	mov	r3, r1
 80003b8:	70fb      	strb	r3, [r7, #3]
 80003ba:	4613      	mov	r3, r2
 80003bc:	70bb      	strb	r3, [r7, #2]
	uint8_t pos_Addr = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]
	if(row == 1)
 80003c2:	78fb      	ldrb	r3, [r7, #3]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d106      	bne.n	80003d6 <LCD_setCursor+0x28>
	{
		pos_Addr = 0x80 + row + col;
 80003c8:	78fa      	ldrb	r2, [r7, #3]
 80003ca:	78bb      	ldrb	r3, [r7, #2]
 80003cc:	4413      	add	r3, r2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	3b80      	subs	r3, #128	; 0x80
 80003d2:	73fb      	strb	r3, [r7, #15]
 80003d4:	e007      	b.n	80003e6 <LCD_setCursor+0x38>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80003d6:	78bb      	ldrb	r3, [r7, #2]
 80003d8:	3340      	adds	r3, #64	; 0x40
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003e2:	b25b      	sxtb	r3, r3
 80003e4:	73fb      	strb	r3, [r7, #15]
	}
	LCD_sendCommand(lcd_handle, pos_Addr);
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	4619      	mov	r1, r3
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f7ff ff4e 	bl	800028c <LCD_sendCommand>
}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fe:	f000 f9c1 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000402:	f000 f835 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000406:	f000 f8c5 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 800040a:	f000 f883 	bl	8000514 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD16X2 = LCD_init(&hi2c1, 0x4E);
 800040e:	4c14      	ldr	r4, [pc, #80]	; (8000460 <main+0x68>)
 8000410:	463b      	mov	r3, r7
 8000412:	224e      	movs	r2, #78	; 0x4e
 8000414:	4913      	ldr	r1, [pc, #76]	; (8000464 <main+0x6c>)
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff fedc 	bl	80001d4 <LCD_init>
 800041c:	463b      	mov	r3, r7
 800041e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_setCursor(&LCD16X2, 1, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2101      	movs	r1, #1
 800042a:	480d      	ldr	r0, [pc, #52]	; (8000460 <main+0x68>)
 800042c:	f7ff ffbf 	bl	80003ae <LCD_setCursor>
  LCD_sendString(&LCD16X2, "HELLO");
 8000430:	490d      	ldr	r1, [pc, #52]	; (8000468 <main+0x70>)
 8000432:	480b      	ldr	r0, [pc, #44]	; (8000460 <main+0x68>)
 8000434:	f7ff ff98 	bl	8000368 <LCD_sendString>
  HAL_Delay(900);
 8000438:	f44f 7061 	mov.w	r0, #900	; 0x384
 800043c:	f000 fa08 	bl	8000850 <HAL_Delay>
  LCD_clearDisplay(&LCD16X2);
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <main+0x68>)
 8000442:	f7ff ffa8 	bl	8000396 <LCD_clearDisplay>
  HAL_Delay(100);
 8000446:	2064      	movs	r0, #100	; 0x64
 8000448:	f000 fa02 	bl	8000850 <HAL_Delay>
  LCD_setCursor(&LCD16X2, 1, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <main+0x68>)
 8000452:	f7ff ffac 	bl	80003ae <LCD_setCursor>
  LCD_sendString(&LCD16X2, "WORLD");
 8000456:	4905      	ldr	r1, [pc, #20]	; (800046c <main+0x74>)
 8000458:	4801      	ldr	r0, [pc, #4]	; (8000460 <main+0x68>)
 800045a:	f7ff ff85 	bl	8000368 <LCD_sendString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045e:	e7fe      	b.n	800045e <main+0x66>
 8000460:	20000028 	.word	0x20000028
 8000464:	20000034 	.word	0x20000034
 8000468:	08002b3c 	.word	0x08002b3c
 800046c:	08002b44 	.word	0x08002b44

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0a6      	sub	sp, #152	; 0x98
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800047a:	2228      	movs	r2, #40	; 0x28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fb48 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2258      	movs	r2, #88	; 0x58
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fb3a 	bl	8002b14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a0:	2302      	movs	r3, #2
 80004a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	2301      	movs	r3, #1
 80004a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a8:	2310      	movs	r3, #16
 80004aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 ffed 	bl	8001498 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004c4:	f000 f88a 	bl	80005dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004cc:	2300      	movs	r3, #0
 80004ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 feee 	bl	80022c4 <HAL_RCC_ClockConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ee:	f000 f875 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004f2:	2320      	movs	r3, #32
 80004f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4618      	mov	r0, r3
 80004fe:	f002 f8c7 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000508:	f000 f868 	bl	80005dc <Error_Handler>
  }
}
 800050c:	bf00      	nop
 800050e:	3798      	adds	r7, #152	; 0x98
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_I2C1_Init+0x74>)
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <MX_I2C1_Init+0x78>)
 800051c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_I2C1_Init+0x74>)
 8000520:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <MX_I2C1_Init+0x7c>)
 8000522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_I2C1_Init+0x74>)
 800052c:	2201      	movs	r2, #1
 800052e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_I2C1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_I2C1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_I2C1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_I2C1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800054e:	480e      	ldr	r0, [pc, #56]	; (8000588 <MX_I2C1_Init+0x74>)
 8000550:	f000 fc12 	bl	8000d78 <HAL_I2C_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800055a:	f000 f83f 	bl	80005dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800055e:	2100      	movs	r1, #0
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <MX_I2C1_Init+0x74>)
 8000562:	f000 ff01 	bl	8001368 <HAL_I2CEx_ConfigAnalogFilter>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800056c:	f000 f836 	bl	80005dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000570:	2100      	movs	r1, #0
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_I2C1_Init+0x74>)
 8000574:	f000 ff43 	bl	80013fe <HAL_I2CEx_ConfigDigitalFilter>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800057e:	f000 f82d 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000034 	.word	0x20000034
 800058c:	40005400 	.word	0x40005400
 8000590:	2000090e 	.word	0x2000090e

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_GPIO_Init+0x44>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <MX_GPIO_Init+0x44>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_GPIO_Init+0x44>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_GPIO_Init+0x44>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <MX_GPIO_Init+0x44>)
 80005b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_GPIO_Init+0x44>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x44>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x44>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x44>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_MspInit+0x44>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <HAL_MspInit+0x44>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_MspInit+0x44>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_I2C_MspInit+0x7c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d128      	bne.n	80006a4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_I2C_MspInit+0x80>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <HAL_I2C_MspInit+0x80>)
 8000658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_I2C_MspInit+0x80>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800066a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000670:	2312      	movs	r3, #18
 8000672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800067c:	2304      	movs	r3, #4
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_I2C_MspInit+0x84>)
 8000688:	f000 f9ec 	bl	8000a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_I2C_MspInit+0x80>)
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_I2C_MspInit+0x80>)
 8000692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000696:	61d3      	str	r3, [r2, #28]
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_I2C_MspInit+0x80>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000400 	.word	0x48000400

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f884 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490e      	ldr	r1, [pc, #56]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0b      	ldr	r4, [pc, #44]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075a:	f7ff ffd7 	bl	800070c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075e:	f002 f9b5 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fe49 	bl	80003f8 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000768:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	08002b84 	.word	0x08002b84
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	20000084 	.word	0x20000084

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f931 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff ff22 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f93b 	bl	8000a4a <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f911 	bl	8000a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x20>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x24>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_IncTick+0x24>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000080 	.word	0x20000080

08000838 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;  
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000080 	.word	0x20000080

08000850 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000858:	f7ff ffee 	bl	8000838 <HAL_GetTick>
 800085c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000868:	d005      	beq.n	8000876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_Delay+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000876:	bf00      	nop
 8000878:	f7ff ffde 	bl	8000838 <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8f7      	bhi.n	8000878 <HAL_Delay+0x28>
  {
  }
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000008 	.word	0x20000008

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
         );
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c8:	d301      	bcc.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00f      	b.n	80009ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <SysTick_Config+0x40>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	210f      	movs	r1, #15
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f7ff ff8e 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SysTick_Config+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SysTick_Config+0x40>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff47 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff5c 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff8e 	bl	8000950 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffb0 	bl	80009b8 <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e160      	b.n	8000d36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 8152 	beq.w	8000d30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d00b      	beq.n	8000aac <HAL_GPIO_Init+0x48>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d007      	beq.n	8000aac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa0:	2b11      	cmp	r3, #17
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b12      	cmp	r3, #18
 8000aaa:	d130      	bne.n	8000b0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	091b      	lsrs	r3, r3, #4
 8000af8:	f003 0201 	and.w	r2, r3, #1
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0xea>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d123      	bne.n	8000b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	08da      	lsrs	r2, r3, #3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3208      	adds	r2, #8
 8000b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	220f      	movs	r2, #15
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	691a      	ldr	r2, [r3, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	08da      	lsrs	r2, r3, #3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3208      	adds	r2, #8
 8000b90:	6939      	ldr	r1, [r7, #16]
 8000b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0203 	and.w	r2, r3, #3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 80ac 	beq.w	8000d30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd8:	4b5e      	ldr	r3, [pc, #376]	; (8000d54 <HAL_GPIO_Init+0x2f0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a5d      	ldr	r2, [pc, #372]	; (8000d54 <HAL_GPIO_Init+0x2f0>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b5b      	ldr	r3, [pc, #364]	; (8000d54 <HAL_GPIO_Init+0x2f0>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bf0:	4a59      	ldr	r2, [pc, #356]	; (8000d58 <HAL_GPIO_Init+0x2f4>)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c1a:	d025      	beq.n	8000c68 <HAL_GPIO_Init+0x204>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a4f      	ldr	r2, [pc, #316]	; (8000d5c <HAL_GPIO_Init+0x2f8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d01f      	beq.n	8000c64 <HAL_GPIO_Init+0x200>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4e      	ldr	r2, [pc, #312]	; (8000d60 <HAL_GPIO_Init+0x2fc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d019      	beq.n	8000c60 <HAL_GPIO_Init+0x1fc>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a4d      	ldr	r2, [pc, #308]	; (8000d64 <HAL_GPIO_Init+0x300>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d013      	beq.n	8000c5c <HAL_GPIO_Init+0x1f8>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a4c      	ldr	r2, [pc, #304]	; (8000d68 <HAL_GPIO_Init+0x304>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00d      	beq.n	8000c58 <HAL_GPIO_Init+0x1f4>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a4b      	ldr	r2, [pc, #300]	; (8000d6c <HAL_GPIO_Init+0x308>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d007      	beq.n	8000c54 <HAL_GPIO_Init+0x1f0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <HAL_GPIO_Init+0x30c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d101      	bne.n	8000c50 <HAL_GPIO_Init+0x1ec>
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	e00c      	b.n	8000c6a <HAL_GPIO_Init+0x206>
 8000c50:	2307      	movs	r3, #7
 8000c52:	e00a      	b.n	8000c6a <HAL_GPIO_Init+0x206>
 8000c54:	2305      	movs	r3, #5
 8000c56:	e008      	b.n	8000c6a <HAL_GPIO_Init+0x206>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x206>
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e004      	b.n	8000c6a <HAL_GPIO_Init+0x206>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x206>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_Init+0x206>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	f002 0203 	and.w	r2, r2, #3
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	4093      	lsls	r3, r2
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c7a:	4937      	ldr	r1, [pc, #220]	; (8000d58 <HAL_GPIO_Init+0x2f4>)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c88:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cac:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cb2:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cd6:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d00:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <HAL_GPIO_Init+0x310>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f47f ae97 	bne.w	8000a74 <HAL_GPIO_Init+0x10>
  }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	371c      	adds	r7, #28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	48001000 	.word	0x48001000
 8000d6c:	48001400 	.word	0x48001400
 8000d70:	48001800 	.word	0x48001800
 8000d74:	40010400 	.word	0x40010400

08000d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e081      	b.n	8000e8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d106      	bne.n	8000da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fc46 	bl	8000630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2224      	movs	r2, #36	; 0x24
 8000da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d107      	bne.n	8000df2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	e006      	b.n	8000e00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d104      	bne.n	8000e12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	ea42 0103 	orr.w	r1, r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	021a      	lsls	r2, r3, #8
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69d9      	ldr	r1, [r3, #28]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a1a      	ldr	r2, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0201 	orr.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2220      	movs	r2, #32
 8000e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	817b      	strh	r3, [r7, #10]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b20      	cmp	r3, #32
 8000eb6:	f040 80da 	bne.w	800106e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_I2C_Master_Transmit+0x30>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e0d3      	b.n	8001070 <HAL_I2C_Master_Transmit+0x1d8>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ed0:	f7ff fcb2 	bl	8000838 <HAL_GetTick>
 8000ed4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2319      	movs	r3, #25
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f000 f8f0 	bl	80010c8 <I2C_WaitOnFlagUntilTimeout>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e0be      	b.n	8001070 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2221      	movs	r2, #33	; 0x21
 8000ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2210      	movs	r2, #16
 8000efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	893a      	ldrh	r2, [r7, #8]
 8000f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	2bff      	cmp	r3, #255	; 0xff
 8000f22:	d90e      	bls.n	8000f42 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	22ff      	movs	r2, #255	; 0xff
 8000f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	8979      	ldrh	r1, [r7, #10]
 8000f32:	4b51      	ldr	r3, [pc, #324]	; (8001078 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 f9e6 	bl	800130c <I2C_TransferConfig>
 8000f40:	e06c      	b.n	800101c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	8979      	ldrh	r1, [r7, #10]
 8000f54:	4b48      	ldr	r3, [pc, #288]	; (8001078 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f000 f9d5 	bl	800130c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000f62:	e05b      	b.n	800101c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	6a39      	ldr	r1, [r7, #32]
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 f8ed 	bl	8001148 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e07b      	b.n	8001070 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d034      	beq.n	800101c <HAL_I2C_Master_Transmit+0x184>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d130      	bne.n	800101c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 f87f 	bl	80010c8 <I2C_WaitOnFlagUntilTimeout>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e04d      	b.n	8001070 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d90e      	bls.n	8000ffc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	8979      	ldrh	r1, [r7, #10]
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f989 	bl	800130c <I2C_TransferConfig>
 8000ffa:	e00f      	b.n	800101c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001000:	b29a      	uxth	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100a:	b2da      	uxtb	r2, r3
 800100c:	8979      	ldrh	r1, [r7, #10]
 800100e:	2300      	movs	r3, #0
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f978 	bl	800130c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001020:	b29b      	uxth	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d19e      	bne.n	8000f64 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	6a39      	ldr	r1, [r7, #32]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f8cc 	bl	80011c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e01a      	b.n	8001070 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2220      	movs	r2, #32
 8001040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_I2C_Master_Transmit+0x1e4>)
 800104e:	400b      	ands	r3, r1
 8001050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2220      	movs	r2, #32
 8001056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800106e:	2302      	movs	r3, #2
  }
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	80002000 	.word	0x80002000
 800107c:	fe00e800 	.word	0xfe00e800

08001080 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b02      	cmp	r3, #2
 8001094:	d103      	bne.n	800109e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d007      	beq.n	80010bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699a      	ldr	r2, [r3, #24]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	619a      	str	r2, [r3, #24]
  }
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010d8:	e022      	b.n	8001120 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d01e      	beq.n	8001120 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010e2:	f7ff fba9 	bl	8000838 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d302      	bcc.n	80010f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d113      	bne.n	8001120 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f043 0220 	orr.w	r2, r3, #32
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2220      	movs	r2, #32
 8001108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e00f      	b.n	8001140 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	699a      	ldr	r2, [r3, #24]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4013      	ands	r3, r2
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	429a      	cmp	r2, r3
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	429a      	cmp	r2, r3
 800113c:	d0cd      	beq.n	80010da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001154:	e02c      	b.n	80011b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 f870 	bl	8001240 <I2C_IsAcknowledgeFailed>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e02a      	b.n	80011c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d01e      	beq.n	80011b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001172:	f7ff fb61 	bl	8000838 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	429a      	cmp	r2, r3
 8001180:	d302      	bcc.n	8001188 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d113      	bne.n	80011b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f043 0220 	orr.w	r2, r3, #32
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2220      	movs	r2, #32
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e007      	b.n	80011c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d1cb      	bne.n	8001156 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011d4:	e028      	b.n	8001228 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f830 	bl	8001240 <I2C_IsAcknowledgeFailed>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e026      	b.n	8001238 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011ea:	f7ff fb25 	bl	8000838 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d302      	bcc.n	8001200 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d113      	bne.n	8001228 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	f043 0220 	orr.w	r2, r3, #32
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2220      	movs	r2, #32
 8001210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e007      	b.n	8001238 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	2b20      	cmp	r3, #32
 8001234:	d1cf      	bne.n	80011d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b10      	cmp	r3, #16
 8001258:	d151      	bne.n	80012fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800125a:	e022      	b.n	80012a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001262:	d01e      	beq.n	80012a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001264:	f7ff fae8 	bl	8000838 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	429a      	cmp	r2, r3
 8001272:	d302      	bcc.n	800127a <I2C_IsAcknowledgeFailed+0x3a>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d113      	bne.n	80012a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f043 0220 	orr.w	r2, r3, #32
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2220      	movs	r2, #32
 800128a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e02e      	b.n	8001300 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b20      	cmp	r3, #32
 80012ae:	d1d5      	bne.n	800125c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2210      	movs	r2, #16
 80012b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2220      	movs	r2, #32
 80012be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff fedd 	bl	8001080 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <I2C_IsAcknowledgeFailed+0xc8>)
 80012d2:	400b      	ands	r3, r1
 80012d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f043 0204 	orr.w	r2, r3, #4
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2220      	movs	r2, #32
 80012e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	fe00e800 	.word	0xfe00e800

0800130c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	817b      	strh	r3, [r7, #10]
 800131a:	4613      	mov	r3, r2
 800131c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	0d5b      	lsrs	r3, r3, #21
 8001328:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <I2C_TransferConfig+0x58>)
 800132e:	430b      	orrs	r3, r1
 8001330:	43db      	mvns	r3, r3
 8001332:	ea02 0103 	and.w	r1, r2, r3
 8001336:	897b      	ldrh	r3, [r7, #10]
 8001338:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800133c:	7a7b      	ldrb	r3, [r7, #9]
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	431a      	orrs	r2, r3
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	431a      	orrs	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	03ff63ff 	.word	0x03ff63ff

08001368 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b20      	cmp	r3, #32
 800137c:	d138      	bne.n	80013f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001388:	2302      	movs	r3, #2
 800138a:	e032      	b.n	80013f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e000      	b.n	80013f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013f0:	2302      	movs	r3, #2
  }
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b20      	cmp	r3, #32
 8001412:	d139      	bne.n	8001488 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800141e:	2302      	movs	r3, #2
 8001420:	e033      	b.n	800148a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2224      	movs	r2, #36	; 0x24
 800142e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001450:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e000      	b.n	800148a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001488:	2302      	movs	r3, #2
  }
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800149e:	af00      	add	r7, sp, #0
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f000 bf01 	b.w	80022b4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8160 	beq.w	8001782 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014c2:	4bae      	ldr	r3, [pc, #696]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d00c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ce:	4bab      	ldr	r3, [pc, #684]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d159      	bne.n	800158e <HAL_RCC_OscConfig+0xf6>
 80014da:	4ba8      	ldr	r3, [pc, #672]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e6:	d152      	bne.n	800158e <HAL_RCC_OscConfig+0xf6>
 80014e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d102      	bne.n	800151a <HAL_RCC_OscConfig+0x82>
 8001514:	4b99      	ldr	r3, [pc, #612]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0xae>
 800151a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800152e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001532:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001536:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001542:	4b8e      	ldr	r3, [pc, #568]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800154a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800154e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001552:	fa92 f2a2 	rbit	r2, r2
 8001556:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800155a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800155e:	fab2 f282 	clz	r2, r2
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	f042 0220 	orr.w	r2, r2, #32
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8102 	beq.w	8001780 <HAL_RCC_OscConfig+0x2e8>
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 80fc 	bne.w	8001780 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f000 be93 	b.w	80022b4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x110>
 800159a:	4b78      	ldr	r3, [pc, #480]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a77      	ldr	r2, [pc, #476]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e030      	b.n	800160a <HAL_RCC_OscConfig+0x172>
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x134>
 80015b2:	4b72      	ldr	r3, [pc, #456]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a71      	ldr	r2, [pc, #452]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b6f      	ldr	r3, [pc, #444]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6e      	ldr	r2, [pc, #440]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e01e      	b.n	800160a <HAL_RCC_OscConfig+0x172>
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x15a>
 80015d8:	4b68      	ldr	r3, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a67      	ldr	r2, [pc, #412]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b65      	ldr	r3, [pc, #404]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a64      	ldr	r2, [pc, #400]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0x172>
 80015f2:	4b62      	ldr	r3, [pc, #392]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a61      	ldr	r2, [pc, #388]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 80015f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b5f      	ldr	r3, [pc, #380]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a5e      	ldr	r2, [pc, #376]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d059      	beq.n	80016c8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff f910 	bl	8000838 <HAL_GetTick>
 8001618:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161e:	f7ff f90b 	bl	8000838 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d902      	bls.n	8001634 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	f000 be40 	b.w	80022b4 <HAL_RCC_OscConfig+0xe1c>
 8001634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001638:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001648:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <HAL_RCC_OscConfig+0x1ce>
 8001660:	4b46      	ldr	r3, [pc, #280]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1fa>
 8001666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800167a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001682:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001696:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800169a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800169e:	fa92 f2a2 	rbit	r2, r2
 80016a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80016a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016aa:	fab2 f282 	clz	r2, r2
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f042 0220 	orr.w	r2, r2, #32
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	f002 021f 	and.w	r2, r2, #31
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0ab      	beq.n	800161e <HAL_RCC_OscConfig+0x186>
 80016c6:	e05c      	b.n	8001782 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff f8b6 	bl	8000838 <HAL_GetTick>
 80016cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d2:	f7ff f8b1 	bl	8000838 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d902      	bls.n	80016e8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f000 bde6 	b.w	80022b4 <HAL_RCC_OscConfig+0xe1c>
 80016e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <HAL_RCC_OscConfig+0x282>
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x2ae>
 800171a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800172e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001732:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001736:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_RCC_OscConfig+0x2e4>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800174a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800174e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001752:	fa92 f2a2 	rbit	r2, r2
 8001756:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800175a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800175e:	fab2 f282 	clz	r2, r2
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f002 021f 	and.w	r2, r2, #31
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ab      	bne.n	80016d2 <HAL_RCC_OscConfig+0x23a>
 800177a:	e002      	b.n	8001782 <HAL_RCC_OscConfig+0x2ea>
 800177c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8170 	beq.w	8001a72 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001792:	4bd0      	ldr	r3, [pc, #832]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800179e:	4bcd      	ldr	r3, [pc, #820]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d16d      	bne.n	8001886 <HAL_RCC_OscConfig+0x3ee>
 80017aa:	4bca      	ldr	r3, [pc, #808]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017b6:	d166      	bne.n	8001886 <HAL_RCC_OscConfig+0x3ee>
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80017ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0x350>
 80017e2:	4bbc      	ldr	r3, [pc, #752]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	e013      	b.n	8001810 <HAL_RCC_OscConfig+0x378>
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017fa:	2302      	movs	r3, #2
 80017fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001800:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800180c:	4bb1      	ldr	r3, [pc, #708]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	2202      	movs	r2, #2
 8001812:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001816:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800181a:	fa92 f2a2 	rbit	r2, r2
 800181e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001822:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001826:	fab2 f282 	clz	r2, r2
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	f042 0220 	orr.w	r2, r2, #32
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	f002 021f 	and.w	r2, r2, #31
 8001836:	2101      	movs	r1, #1
 8001838:	fa01 f202 	lsl.w	r2, r1, r2
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_RCC_OscConfig+0x3ba>
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d002      	beq.n	8001852 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	f000 bd31 	b.w	80022b4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4ba0      	ldr	r3, [pc, #640]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	21f8      	movs	r1, #248	; 0xf8
 8001862:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800186a:	fa91 f1a1 	rbit	r1, r1
 800186e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001872:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001876:	fab1 f181 	clz	r1, r1
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	408b      	lsls	r3, r1
 800187e:	4995      	ldr	r1, [pc, #596]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001884:	e0f5      	b.n	8001a72 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8085 	beq.w	800199c <HAL_RCC_OscConfig+0x504>
 8001892:	2301      	movs	r3, #1
 8001894:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80018a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	461a      	mov	r2, r3
 80018ba:	2301      	movs	r3, #1
 80018bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7fe ffbb 	bl	8000838 <HAL_GetTick>
 80018c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c8:	f7fe ffb6 	bl	8000838 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d902      	bls.n	80018de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	f000 bceb 	b.w	80022b4 <HAL_RCC_OscConfig+0xe1c>
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d102      	bne.n	800190e <HAL_RCC_OscConfig+0x476>
 8001908:	4b72      	ldr	r3, [pc, #456]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e013      	b.n	8001936 <HAL_RCC_OscConfig+0x49e>
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001926:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001932:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2202      	movs	r2, #2
 8001938:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800193c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001940:	fa92 f2a2 	rbit	r2, r2
 8001944:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001948:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800194c:	fab2 f282 	clz	r2, r2
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f002 021f 	and.w	r2, r2, #31
 800195c:	2101      	movs	r1, #1
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0af      	beq.n	80018c8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	21f8      	movs	r1, #248	; 0xf8
 8001978:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001980:	fa91 f1a1 	rbit	r1, r1
 8001984:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001988:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800198c:	fab1 f181 	clz	r1, r1
 8001990:	b2c9      	uxtb	r1, r1
 8001992:	408b      	lsls	r3, r1
 8001994:	494f      	ldr	r1, [pc, #316]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
 800199a:	e06a      	b.n	8001a72 <HAL_RCC_OscConfig+0x5da>
 800199c:	2301      	movs	r3, #1
 800199e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80019ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7fe ff36 	bl	8000838 <HAL_GetTick>
 80019cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7fe ff31 	bl	8000838 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d902      	bls.n	80019e8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f000 bc66 	b.w	80022b4 <HAL_RCC_OscConfig+0xe1c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0x580>
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e013      	b.n	8001a40 <HAL_RCC_OscConfig+0x5a8>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_RCC_OscConfig+0x63c>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	2202      	movs	r2, #2
 8001a42:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a46:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a4a:	fa92 f2a2 	rbit	r2, r2
 8001a4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a56:	fab2 f282 	clz	r2, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f042 0220 	orr.w	r2, r2, #32
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f002 021f 	and.w	r2, r2, #31
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1af      	bne.n	80019d2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80da 	beq.w	8001c36 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d069      	beq.n	8001b60 <HAL_RCC_OscConfig+0x6c8>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_OscConfig+0x640>)
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe febf 	bl	8000838 <HAL_GetTick>
 8001aba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	e00d      	b.n	8001adc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7fe feba 	bl	8000838 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d905      	bls.n	8001adc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e3ef      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	10908120 	.word	0x10908120
 8001adc:	2302      	movs	r3, #2
 8001ade:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001af4:	2202      	movs	r2, #2
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b20:	4ba4      	ldr	r3, [pc, #656]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b28:	2102      	movs	r1, #2
 8001b2a:	6019      	str	r1, [r3, #0]
 8001b2c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f1a3 	rbit	r1, r3
 8001b36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b3a:	6019      	str	r1, [r3, #0]
  return result;
 8001b3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0b0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x628>
 8001b5e:	e06a      	b.n	8001c36 <HAL_RCC_OscConfig+0x79e>
 8001b60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b76:	601a      	str	r2, [r3, #0]
  return result;
 8001b78:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b8c      	ldr	r3, [pc, #560]	; (8001db8 <HAL_RCC_OscConfig+0x920>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7fe fe51 	bl	8000838 <HAL_GetTick>
 8001b96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9a:	e009      	b.n	8001bb0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7fe fe4c 	bl	8000838 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e381      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
 8001bb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001be4:	2202      	movs	r2, #2
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c00:	2102      	movs	r1, #2
 8001c02:	6019      	str	r1, [r3, #0]
 8001c04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f1a3 	rbit	r1, r3
 8001c0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c12:	6019      	str	r1, [r3, #0]
  return result;
 8001c14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1b2      	bne.n	8001b9c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8157 	beq.w	8001ef4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d112      	bne.n	8001c7e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	4a55      	ldr	r2, [pc, #340]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c62:	61d3      	str	r3, [r2, #28]
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCC_OscConfig+0x924>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11a      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <HAL_RCC_OscConfig+0x924>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_RCC_OscConfig+0x924>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7fe fdcf 	bl	8000838 <HAL_GetTick>
 8001c9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	e009      	b.n	8001cb4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7fe fdca 	bl	8000838 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e2ff      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_RCC_OscConfig+0x924>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ef      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x840>
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a39      	ldr	r2, [pc, #228]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e02f      	b.n	8001d38 <HAL_RCC_OscConfig+0x8a0>
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x864>
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a33      	ldr	r2, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a30      	ldr	r2, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0x8a0>
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x888>
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0x8a0>
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d06a      	beq.n	8001e18 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7fe fd79 	bl	8000838 <HAL_GetTick>
 8001d46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7fe fd74 	bl	8000838 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e2a7      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
 8001d64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d68:	2202      	movs	r2, #2
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d80:	2202      	movs	r2, #2
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d92:	601a      	str	r2, [r3, #0]
  return result;
 8001d94:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x928>
 8001dae:	4b01      	ldr	r3, [pc, #4]	; (8001db4 <HAL_RCC_OscConfig+0x91c>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	e013      	b.n	8001ddc <HAL_RCC_OscConfig+0x944>
 8001db4:	40021000 	.word	0x40021000
 8001db8:	10908120 	.word	0x10908120
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	4bc0      	ldr	r3, [pc, #768]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001de0:	2102      	movs	r1, #2
 8001de2:	6011      	str	r1, [r2, #0]
 8001de4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	fa92 f1a2 	rbit	r1, r2
 8001dee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001df2:	6011      	str	r1, [r2, #0]
  return result;
 8001df4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	fab2 f282 	clz	r2, r2
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d09a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x8b4>
 8001e16:	e063      	b.n	8001ee0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7fe fd0e 	bl	8000838 <HAL_GetTick>
 8001e1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	e00b      	b.n	8001e3a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fd09 	bl	8000838 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e23c      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
 8001e3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e3e:	2202      	movs	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e56:	2202      	movs	r2, #2
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e68:	601a      	str	r2, [r3, #0]
  return result;
 8001e6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_OscConfig+0x9f2>
 8001e84:	4b95      	ldr	r3, [pc, #596]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	e00d      	b.n	8001ea6 <HAL_RCC_OscConfig+0xa0e>
 8001e8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e8e:	2202      	movs	r2, #2
 8001e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fa93 f2a3 	rbit	r2, r3
 8001e9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b8e      	ldr	r3, [pc, #568]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001eaa:	2102      	movs	r1, #2
 8001eac:	6011      	str	r1, [r2, #0]
 8001eae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	fa92 f1a2 	rbit	r1, r2
 8001eb8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ebc:	6011      	str	r1, [r2, #0]
  return result;
 8001ebe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1a0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ee0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee8:	4b7c      	ldr	r3, [pc, #496]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	4a7b      	ldr	r2, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 81d9 	beq.w	80022b2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	f000 81a6 	beq.w	800225a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	f040 811e 	bne.w	8002156 <HAL_RCC_OscConfig+0xcbe>
 8001f1a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f2a3 	rbit	r2, r3
 8001f2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f32:	601a      	str	r2, [r3, #0]
  return result;
 8001f34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7fe fc72 	bl	8000838 <HAL_GetTick>
 8001f54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe fc6d 	bl	8000838 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1a2      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
 8001f6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f86:	601a      	str	r2, [r3, #0]
  return result;
 8001f88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xb10>
 8001fa2:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e01b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb48>
 8001fa8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe8:	6011      	str	r1, [r2, #0]
 8001fea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	fa92 f1a2 	rbit	r1, r2
 8001ff4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ff8:	6011      	str	r1, [r2, #0]
  return result;
 8001ffa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	f002 021f 	and.w	r2, r2, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d19e      	bne.n	8001f5a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800201c:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f023 020f 	bic.w	r2, r3, #15
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	492c      	ldr	r1, [pc, #176]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 800202c:	4313      	orrs	r3, r2
 800202e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a19      	ldr	r1, [r3, #32]
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	430b      	orrs	r3, r1
 8002046:	4925      	ldr	r1, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002064:	601a      	str	r2, [r3, #0]
  return result;
 8002066:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800206a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002076:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	461a      	mov	r2, r3
 800207e:	2301      	movs	r3, #1
 8002080:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fbd9 	bl	8000838 <HAL_GetTick>
 8002086:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fbd4 	bl	8000838 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e109      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
 80020a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020b8:	601a      	str	r2, [r3, #0]
  return result;
 80020ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0xc48>
 80020d4:	4b01      	ldr	r3, [pc, #4]	; (80020dc <HAL_RCC_OscConfig+0xc44>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	e01e      	b.n	8002118 <HAL_RCC_OscConfig+0xc80>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0xe28>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800211c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002120:	6011      	str	r1, [r2, #0]
 8002122:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	fa92 f1a2 	rbit	r1, r2
 800212c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002130:	6011      	str	r1, [r2, #0]
  return result;
 8002132:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	fab2 f282 	clz	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f042 0220 	orr.w	r2, r2, #32
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f002 021f 	and.w	r2, r2, #31
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d09b      	beq.n	800208c <HAL_RCC_OscConfig+0xbf4>
 8002154:	e0ad      	b.n	80022b2 <HAL_RCC_OscConfig+0xe1a>
 8002156:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800215a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800215e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fa93 f2a3 	rbit	r2, r3
 800216a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800216e:	601a      	str	r2, [r3, #0]
  return result;
 8002170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002174:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	461a      	mov	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fb54 	bl	8000838 <HAL_GetTick>
 8002190:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e009      	b.n	80021aa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe fb4f 	bl	8000838 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e084      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
 80021aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c2:	601a      	str	r2, [r3, #0]
  return result;
 80021c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d102      	bne.n	80021e4 <HAL_RCC_OscConfig+0xd4c>
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_RCC_OscConfig+0xe28>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	e01b      	b.n	800221c <HAL_RCC_OscConfig+0xd84>
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f2a3 	rbit	r2, r3
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0xe28>)
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f107 0214 	add.w	r2, r7, #20
 8002220:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002224:	6011      	str	r1, [r2, #0]
 8002226:	f107 0214 	add.w	r2, r7, #20
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	fa92 f1a2 	rbit	r1, r2
 8002230:	f107 0210 	add.w	r2, r7, #16
 8002234:	6011      	str	r1, [r2, #0]
  return result;
 8002236:	f107 0210 	add.w	r2, r7, #16
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	fab2 f282 	clz	r2, r2
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f042 0220 	orr.w	r2, r2, #32
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f002 021f 	and.w	r2, r2, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d19e      	bne.n	8002196 <HAL_RCC_OscConfig+0xcfe>
 8002258:	e02b      	b.n	80022b2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e025      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_RCC_OscConfig+0xe28>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_OscConfig+0xe28>)
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800227c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	429a      	cmp	r2, r3
 8002288:	d111      	bne.n	80022ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800228a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800228e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002298:	429a      	cmp	r2, r3
 800229a:	d108      	bne.n	80022ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800229c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a0:	f003 020f 	and.w	r2, r3, #15
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b09e      	sub	sp, #120	; 0x78
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e162      	b.n	80025a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d910      	bls.n	800230c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	498b      	ldr	r1, [pc, #556]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e14a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	497f      	ldr	r1, [pc, #508]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80dc 	beq.w	80024f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d13c      	bne.n	80023ba <HAL_RCC_ClockConfig+0xf6>
 8002340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002344:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800234e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <HAL_RCC_ClockConfig+0xa6>
 8002364:	4b6f      	ldr	r3, [pc, #444]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	e00f      	b.n	800238a <HAL_RCC_ClockConfig+0xc6>
 800236a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
 8002378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800237c:	663b      	str	r3, [r7, #96]	; 0x60
 800237e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800238e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002392:	fa92 f2a2 	rbit	r2, r2
 8002396:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002398:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d17b      	bne.n	80024ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0f3      	b.n	80025a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d13c      	bne.n	800243c <HAL_RCC_ClockConfig+0x178>
 80023c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_ClockConfig+0x128>
 80023e6:	4b4f      	ldr	r3, [pc, #316]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e00f      	b.n	800240c <HAL_RCC_ClockConfig+0x148>
 80023ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	647b      	str	r3, [r7, #68]	; 0x44
 80023fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002410:	63ba      	str	r2, [r7, #56]	; 0x38
 8002412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002414:	fa92 f2a2 	rbit	r2, r2
 8002418:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800241a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241c:	fab2 f282 	clz	r2, r2
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f042 0220 	orr.w	r2, r2, #32
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f002 021f 	and.w	r2, r2, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d13a      	bne.n	80024ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b2      	b.n	80025a2 <HAL_RCC_ClockConfig+0x2de>
 800243c:	2302      	movs	r3, #2
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_RCC_ClockConfig+0x1a0>
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e00d      	b.n	8002480 <HAL_RCC_ClockConfig+0x1bc>
 8002464:	2302      	movs	r3, #2
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	2302      	movs	r3, #2
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2202      	movs	r2, #2
 8002482:	61ba      	str	r2, [r7, #24]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	fa92 f2a2 	rbit	r2, r2
 800248a:	617a      	str	r2, [r7, #20]
  return result;
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f042 0220 	orr.w	r2, r2, #32
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f002 021f 	and.w	r2, r2, #31
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f202 	lsl.w	r2, r1, r2
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e079      	b.n	80025a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	491a      	ldr	r1, [pc, #104]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe f9ba 	bl	8000838 <HAL_GetTick>
 80024c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe f9b6 	bl	8000838 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e061      	b.n	80025a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_ClockConfig+0x260>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d214      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4906      	ldr	r1, [pc, #24]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <HAL_RCC_ClockConfig+0x25c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e040      	b.n	80025a2 <HAL_RCC_ClockConfig+0x2de>
 8002520:	40022000 	.word	0x40022000
 8002524:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_ClockConfig+0x2e8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	491a      	ldr	r1, [pc, #104]	; (80025ac <HAL_RCC_ClockConfig+0x2e8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_RCC_ClockConfig+0x2e8>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4912      	ldr	r1, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x2e8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002566:	f000 f829 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800256a:	4601      	mov	r1, r0
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_RCC_ClockConfig+0x2e8>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002574:	22f0      	movs	r2, #240	; 0xf0
 8002576:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	60fa      	str	r2, [r7, #12]
  return result;
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	40d3      	lsrs	r3, r2
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x2ec>)
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	fa21 f303 	lsr.w	r3, r1, r3
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_RCC_ClockConfig+0x2f0>)
 8002594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_RCC_ClockConfig+0x2f4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe f908 	bl	80007b0 <HAL_InitTick>
  
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3778      	adds	r7, #120	; 0x78
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08002b4c 	.word	0x08002b4c
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b08b      	sub	sp, #44	; 0x2c
 80025c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x30>
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x36>
 80025ea:	e03f      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ee:	623b      	str	r3, [r7, #32]
      break;
 80025f0:	e03f      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	fa92 f2a2 	rbit	r2, r2
 8002604:	607a      	str	r2, [r7, #4]
  return result;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	40d3      	lsrs	r3, r2
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	220f      	movs	r2, #15
 8002620:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	fa92 f2a2 	rbit	r2, r2
 8002628:	60fa      	str	r2, [r7, #12]
  return result;
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	40d3      	lsrs	r3, r2
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002644:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	fbb2 f2f3 	udiv	r2, r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
 8002654:	e007      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fbb2 f2f3 	udiv	r2, r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	623b      	str	r3, [r7, #32]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0xc8>)
 800266e:	623b      	str	r3, [r7, #32]
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	6a3b      	ldr	r3, [r7, #32]
}
 8002674:	4618      	mov	r0, r3
 8002676:	372c      	adds	r7, #44	; 0x2c
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40021000 	.word	0x40021000
 8002684:	007a1200 	.word	0x007a1200
 8002688:	08002b5c 	.word	0x08002b5c
 800268c:	08002b6c 	.word	0x08002b6c

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b092      	sub	sp, #72	; 0x48
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80d4 	beq.w	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b4:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10e      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	61d3      	str	r3, [r2, #28]
 80026cc:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b45      	ldr	r3, [pc, #276]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe f89f 	bl	8000838 <HAL_GetTick>
 80026fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe f89b 	bl	8000838 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	; 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1d6      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002724:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8084 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002738:	429a      	cmp	r2, r3
 800273a:	d07c      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	2301      	movs	r3, #1
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	461a      	mov	r2, r3
 800278a:	2300      	movs	r3, #0
 800278c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002792:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04b      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe f84b 	bl	8000838 <HAL_GetTick>
 80027a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe f847 	bl	8000838 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e180      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027bc:	2302      	movs	r3, #2
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
 80027c8:	2302      	movs	r3, #2
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	61fb      	str	r3, [r7, #28]
  return result;
 80027d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d108      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027ea:	4b01      	ldr	r3, [pc, #4]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	e00d      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
 80027f8:	10908100 	.word	0x10908100
 80027fc:	2302      	movs	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	4ba0      	ldr	r3, [pc, #640]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2202      	movs	r2, #2
 800280e:	613a      	str	r2, [r7, #16]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	fa92 f2a2 	rbit	r2, r2
 8002816:	60fa      	str	r2, [r7, #12]
  return result;
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f002 021f 	and.w	r2, r2, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0b7      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002836:	4b95      	ldr	r3, [pc, #596]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4992      	ldr	r1, [pc, #584]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b8e      	ldr	r3, [pc, #568]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	4a8d      	ldr	r2, [pc, #564]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002868:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f023 0203 	bic.w	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4985      	ldr	r1, [pc, #532]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	497e      	ldr	r1, [pc, #504]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a4:	4b79      	ldr	r3, [pc, #484]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4976      	ldr	r1, [pc, #472]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f023 0210 	bic.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	496f      	ldr	r1, [pc, #444]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	4967      	ldr	r1, [pc, #412]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f023 0220 	bic.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4960      	ldr	r1, [pc, #384]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800291c:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	4958      	ldr	r1, [pc, #352]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800293a:	4b54      	ldr	r3, [pc, #336]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4951      	ldr	r1, [pc, #324]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002958:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4949      	ldr	r1, [pc, #292]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4942      	ldr	r1, [pc, #264]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002994:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	493a      	ldr	r1, [pc, #232]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	4933      	ldr	r1, [pc, #204]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	492b      	ldr	r1, [pc, #172]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4924      	ldr	r1, [pc, #144]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	491c      	ldr	r1, [pc, #112]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	4915      	ldr	r1, [pc, #84]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	490d      	ldr	r1, [pc, #52]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a72:	4906      	ldr	r1, [pc, #24]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00c      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a84:	4b01      	ldr	r3, [pc, #4]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	e002      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a98:	490b      	ldr	r1, [pc, #44]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab6:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3748      	adds	r7, #72	; 0x48
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	4d0d      	ldr	r5, [pc, #52]	; (8002b04 <__libc_init_array+0x38>)
 8002ad0:	4c0d      	ldr	r4, [pc, #52]	; (8002b08 <__libc_init_array+0x3c>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	4d0b      	ldr	r5, [pc, #44]	; (8002b0c <__libc_init_array+0x40>)
 8002ade:	4c0c      	ldr	r4, [pc, #48]	; (8002b10 <__libc_init_array+0x44>)
 8002ae0:	f000 f820 	bl	8002b24 <_init>
 8002ae4:	1b64      	subs	r4, r4, r5
 8002ae6:	10a4      	asrs	r4, r4, #2
 8002ae8:	2600      	movs	r6, #0
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	08002b7c 	.word	0x08002b7c
 8002b08:	08002b7c 	.word	0x08002b7c
 8002b0c:	08002b7c 	.word	0x08002b7c
 8002b10:	08002b80 	.word	0x08002b80

08002b14 <memset>:
 8002b14:	4402      	add	r2, r0
 8002b16:	4603      	mov	r3, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <_init>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr

08002b30 <_fini>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr
